            console.log('Authentication JavaScript loading...');
            
            // Helper function to get user type label
            function getUserTypeLabel(userType) {
              const labels = {
                jobseeker: '구직자',
                company: '구인기업', 
                agent: '에이전트',
                admin: '관리자'
              };
              return labels[userType] || '사용자';
            }
            
            // 🔐 로그인 모달 표시
            function showLoginModal() {
              console.log('로그인 모달 호출됨');
              
              // 기존 모달이 있으면 제거
              const existingModal = document.querySelector('[id^="signupModal"], [id^="loginModal"]');
              if (existingModal) {
                existingModal.remove();
              }
              
              const modalId = 'loginModal_' + Date.now();
              const modal = document.createElement('div');
              modal.id = modalId;
              modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center modal-overlay';
              modal.style.zIndex = '9999'; // 매우 높은 z-index
              modal.innerHTML = `
                <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4 modal-content" style="position: relative; z-index: 10000;">
                  <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-900">로그인</h2>
                    <button type="button" class="close-modal-btn text-gray-500 hover:text-gray-700" style="z-index: 10001;">
                      <i class="fas fa-times text-xl"></i>
                    </button>
                  </div>
                  
                  <form id="loginForm" class="space-y-4">
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">이메일</label>
                      <input type="email" name="email" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required placeholder="이메일을 입력하세요" />
                    </div>
                    
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">비밀번호</label>
                      <input type="password" name="password" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required placeholder="비밀번호를 입력하세요" />
                    </div>
                    
                    <div class="flex space-x-3">
                      <button type="button" class="cancel-btn flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400 transition-colors">
                        취소
                      </button>
                      <button type="submit" class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors">
                        로그인
                      </button>
                    </div>
                    
                    <!-- 아이디/비밀번호 찾기 링크 -->
                    <div class="mt-4 text-center text-sm">
                      <div class="flex justify-center space-x-4">
                        <button type="button" class="find-email-btn text-blue-600 hover:text-blue-800 underline">
                          이메일 찾기
                        </button>
                        <span class="text-gray-400">|</span>
                        <button type="button" class="find-password-btn text-blue-600 hover:text-blue-800 underline">
                          비밀번호 찾기
                        </button>
                      </div>
                    </div>
                  </form>
                </div>
              `;
              
              // 페이지 스크롤 및 상호작용 비활성화
              document.body.style.overflow = 'hidden';
              document.body.classList.add('modal-open');
              
              document.body.appendChild(modal);
              
              // 모든 클릭 이벤트 완전 차단 (모달 외부)
              const stopAllEvents = function(event) {
                const modalContent = modal.querySelector('.modal-content');
                if (!modalContent.contains(event.target)) {
                  event.preventDefault();
                  event.stopPropagation();
                  event.stopImmediatePropagation();
                  return false;
                }
              };
              
              // 강력한 이벤트 차단 - 캡처링과 버블링 단계 모두에서 차단
              document.addEventListener('click', stopAllEvents, true);
              document.addEventListener('mousedown', stopAllEvents, true);
              document.addEventListener('mouseup', stopAllEvents, true);
              document.addEventListener('touchstart', stopAllEvents, true);
              document.addEventListener('touchend', stopAllEvents, true);
              
              // ESC 키로 모달 닫기
              const handleEscape = function(event) {
                if (event.key === 'Escape') {
                  event.preventDefault();
                  event.stopPropagation();
                  closeModal(modal);
                }
              };
              document.addEventListener('keydown', handleEscape, true);
              
              // 닫기 버튼 이벤트 - 직접 이벤트 리스너 추가
              const closeBtn = modal.querySelector('.close-modal-btn');
              closeBtn.addEventListener('click', function(event) {
                event.preventDefault();
                event.stopPropagation();
                closeModal(modal);
              }, true);
              
              // 취소 버튼 이벤트 - 직접 이벤트 리스너 추가
              const cancelBtn = modal.querySelector('.cancel-btn');
              cancelBtn.addEventListener('click', function(event) {
                event.preventDefault();
                event.stopPropagation();
                closeModal(modal);
              }, true);
              
              // 폼 제출 이벤트
              const loginForm = document.getElementById('loginForm');
              loginForm.addEventListener('submit', function(event) {
                event.preventDefault();
                event.stopPropagation();
                handleLogin(event);
              }, true);
              
              // 이메일 찾기 버튼 이벤트
              const findEmailBtn = modal.querySelector('.find-email-btn');
              findEmailBtn.addEventListener('click', function(event) {
                event.preventDefault();
                event.stopPropagation();
                closeModal(modal);
                showFindEmailModal();
              }, true);
              
              // 비밀번호 찾기 버튼 이벤트
              const findPasswordBtn = modal.querySelector('.find-password-btn');
              findPasswordBtn.addEventListener('click', function(event) {
                event.preventDefault();
                event.stopPropagation();
                closeModal(modal);
                showFindPasswordModal();
              }, true);
              
              // 모달 정리 함수
              modal._cleanup = function() {
                document.removeEventListener('keydown', handleEscape, true);
                document.removeEventListener('click', stopAllEvents, true);
                document.removeEventListener('mousedown', stopAllEvents, true);
                document.removeEventListener('mouseup', stopAllEvents, true);
                document.removeEventListener('touchstart', stopAllEvents, true);
                document.removeEventListener('touchend', stopAllEvents, true);
                
                // 페이지 스크롤 및 상호작용 복원
                document.body.style.overflow = '';
                document.body.classList.remove('modal-open');
              };
              
              // 첫 번째 입력 필드에 포커스
              setTimeout(() => {
                const firstInput = modal.querySelector('input[name="email"]');
                if (firstInput) {
                  firstInput.focus();
                }
              }, 100);
            }
            
            // 📝 회원가입 모달 표시  
            function showSignupModal() {
              console.log('회원가입 모달 호출됨');
              
              // 기존 모달이 있으면 제거
              const existingModal = document.querySelector('[id^="signupModal"], [id^="loginModal"]');
              if (existingModal) {
                existingModal.remove();
              }
              
              const modalId = 'signupModal_' + Date.now();
              const modal = document.createElement('div');
              modal.id = modalId;
              modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center modal-overlay';
              modal.style.zIndex = '9999'; // 매우 높은 z-index
              modal.innerHTML = `
                <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4 modal-content" style="position: relative; z-index: 10000;">
                  <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-900">회원가입</h2>
                    <button type="button" class="close-modal-btn text-gray-500 hover:text-gray-700" style="z-index: 10001;">
                      <i class="fas fa-times text-xl"></i>
                    </button>
                  </div>
                  
                  <form id="signupForm" class="space-y-4">
                    <div>
                      <label class="block text-sm font-medium text-gray-700 mb-2">사용자 유형</label>
                      <select name="user_type" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
